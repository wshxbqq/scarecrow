/*
insert license info here
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace Entity
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed  class TbTasks
	{

		#region Private Members
		private bool m_isChanged;

		private long m_task_id; 
		private string m_task_url; 
		private int m_task_width; 
		private int m_task_height; 
		private string m_task_type; 
		private string m_task_before_script; 
		private int m_task_delay_time; 
		private int m_task_monitoring_count; 
		private int m_task_error_count; 
		private bool m_task_enable; 
		private bool m_task_alert; 
		private DateTime m_task_time; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// </summary>
		public TbTasks()
		{
			m_task_id = 0; 
			m_task_url = String.Empty; 
			m_task_width = 0; 
			m_task_height = 0; 
			m_task_type = String.Empty; 
			m_task_before_script = String.Empty; 
			m_task_delay_time = 0; 
			m_task_monitoring_count = 0; 
			m_task_error_count = 0; 
			m_task_enable = false; 
			m_task_alert = false; 
			m_task_time = DateTime.MinValue; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor


		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public long TaskId
		{
			get { return m_task_id; }
			set
			{
				m_isChanged |= ( m_task_id != value ); 
				m_task_id = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TaskUrl
		{
			get { return m_task_url; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TaskUrl", value, "null");
				
				if(  value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for TaskUrl", value, value.ToString());
				
				m_isChanged |= (m_task_url != value); m_task_url = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int TaskWidth
		{
			get { return m_task_width; }
			set
			{
				m_isChanged |= ( m_task_width != value ); 
				m_task_width = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int TaskHeight
		{
			get { return m_task_height; }
			set
			{
				m_isChanged |= ( m_task_height != value ); 
				m_task_height = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TaskType
		{
			get { return m_task_type; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TaskType", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for TaskType", value, value.ToString());
				
				m_isChanged |= (m_task_type != value); m_task_type = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TaskBeforeScript
		{
			get { return m_task_before_script; }

			set	
			{	
				if(  value != null &&  value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for TaskBeforeScript", value, value.ToString());
				
				m_isChanged |= (m_task_before_script != value); m_task_before_script = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int TaskDelayTime
		{
			get { return m_task_delay_time; }
			set
			{
				m_isChanged |= ( m_task_delay_time != value ); 
				m_task_delay_time = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int TaskMonitoringCount
		{
			get { return m_task_monitoring_count; }
			set
			{
				m_isChanged |= ( m_task_monitoring_count != value ); 
				m_task_monitoring_count = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int TaskErrorCount
		{
			get { return m_task_error_count; }
			set
			{
				m_isChanged |= ( m_task_error_count != value ); 
				m_task_error_count = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool TaskEnable
		{
			get { return m_task_enable; }
			set
			{
				m_isChanged |= ( m_task_enable != value ); 
				m_task_enable = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool TaskAlert
		{
			get { return m_task_alert; }
			set
			{
				m_isChanged |= ( m_task_alert != value ); 
				m_task_alert = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime TaskTime
		{
			get { return m_task_time; }
			set
			{
				m_isChanged |= ( m_task_time != value ); 
				m_task_time = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public  bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
