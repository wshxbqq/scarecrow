/*
QueryAPI file
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate;
using NHibernate.Cfg;
using Entity;

namespace Dao
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	public class AuthorQuery
	{

		/// <summary>
		/// </summary>
		public bool InsertAPI( Author  element)
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			ITransaction transaction = session.BeginTransaction();
			try
			{
				session.Save(element);
				transaction.Commit();
				return true;
			}
			catch (Exception e)
			{
				transaction.Rollback();
				return false;
			}
			finally
			{
				session.Close();
			}
		}		
	
		/// <summary>
		/// </summary>
		public IList<Author> GetInfoAPI( int iStart, int iCount)
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			ICriteria crit = session.CreateCriteria(typeof(Author));
			crit.SetFirstResult(iStart);
			crit.SetMaxResults( iCount );
			IList<Author> list = crit.List<Author>();
			return list;
		}		
	
		/// <summary>
		/// </summary>
		public IList<Author> GetAllInfoAPI()
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			IList<Author> list = session.CreateQuery(" from Author ").List<Author>();
			return list;
		}		
	
		/// <summary>
		/// </summary>
		public bool UpdateAPI( Author  element)
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			ITransaction transaction = session.BeginTransaction();
			try
			{
				session.Update(element);
				transaction.Commit();
				return true;
			}
			catch (Exception e)
			{
				transaction.Rollback();
				return false;
			}
			finally
			{
				session.Close();
			}
		}		
	
		/// <summary>
		/// </summary>
		public bool DeleteAPI( Author  element)
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			ITransaction transaction = session.BeginTransaction();
			try
			{
				session.Delete(element);
				transaction.Commit();
				return true;
			}
			catch (Exception e)
			{
				transaction.Rollback();
				return false;
			}
			finally
			{
				session.Close();
			}
		}		
	
		/// <summary>
		/// </summary>
		public Author GetInfoByIdAPI(int elementID)
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			return session.Get<Author>(elementID);
		}		
	
		/// <summary>
		/// </summary>
		public IList<object[]> CreateQueryAPI(string strQuery)
		{
			Configuration cfg = new Configuration().Configure();
			ISession session = cfg.BuildSessionFactory().OpenSession();
			IList<object[]> list = session.CreateQuery(strQuery).List<object[]>();
			return list;
		}
		
	}
}
